  /* CSS Reset */

  /*
      1. Use a more-intuitive box-sizing model.
    */
  *,
  *::before,
  *::after {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }

  /*
      3. Allow percentage-based heights in the application
    */
  html,
  body {
    height: 100%;
  }

  /*
      6. Improve media defaults
    */
  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
  }
  /*
      7. Remove built-in form typography styles
    */
  input,
  button,
  textarea,
  select {
    font: inherit;
  }
  /*
      8. Avoid text overflows
    */
  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    overflow-wrap: break-word;
  }

  /* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
  ul[role="list"],
  ol[role="list"] {
    list-style: none;
  }

  /* Set core root defaults */
  html:focus-within {
    scroll-behavior: smooth;
  }

  /* Set core body defaults */
  body {
    min-height: 100vh;
    text-rendering: optimizeSpeed;
    line-height: 1.5;
  }

  /* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
  @media (prefers-reduced-motion: reduce) {
    html:focus-within {
      scroll-behavior: auto;
    }

    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }

  :root {
    /* Colours */

    --softOrange: 35 77% 62%;
    --softRed: 5 85% 63%;
    --offWhite: 36 100% 99%;
    --light: 233 8% 79%;
    --darkB: 236 13% 42%;
    --muted: 240 100% 5%;
    --text: 236, 13%, 42%;

    /* line heights */
    --lh-1: 1;
    --lh-1-1: 1.1;
    --lh-1-4: 1.4;

    /* Font sizes using CLAMP */

    --step--2: clamp(0.69rem, calc(0.63rem + 0.32vw), 0.88rem);
    --step--1: clamp(0.83rem, calc(0.74rem + 0.46vw), 1.1rem);
    --step-0: clamp(1rem, calc(0.87rem + 0.65vw), 1.38rem);
    --step-1: clamp(1.2rem, calc(1.02rem + 0.9vw), 1.72rem);
    --step-2: clamp(1.44rem, calc(1.19rem + 1.23vw), 2.15rem);
    --step-3: clamp(1.73rem, calc(1.4rem + 1.67vw), 2.69rem);
    --step-4: clamp(2.07rem, calc(1.63rem + 2.23vw), 3.36rem);
    --step-5: clamp(2.49rem, calc(1.89rem + 2.97vw), 4.2rem);

      /* font sizes */
    --fs-200: clamp(0.69rem, calc(0.62rem + 0.36vw), 0.88rem);
    --fs-300: clamp(0.83rem, calc(0.73rem + 0.52vw), 1.10rem);
    --fs-400: clamp(1.00rem, calc(0.85rem + 0.73vw), 1.38rem);
    --fs-500: clamp(1.20rem, calc(1.00rem + 1.01vw), 1.72rem);
    --fs-600: clamp(1.44rem, calc(1.16rem + 1.38vw), 2.15rem);
    --fs-700: clamp(1.73rem, calc(1.35rem + 1.87vw), 2.69rem);
    --fs-800: clamp(2.07rem, calc(1.57rem + 2.50vw), 3.36rem);
    --fs-900: clamp(2.49rem, calc(1.82rem + 3.33vw), 4.20rem);

    /* Spacing */

    --space-3xs: clamp(0.25rem, calc(0.21rem + 0.22vw), 0.38rem);
    --space-2xs: clamp(0.5rem, calc(0.43rem + 0.33vw), 0.69rem);
    --space-xs: clamp(0.75rem, calc(0.64rem + 0.54vw), 1.06rem);
    --space-s: clamp(1rem, calc(0.87rem + 0.65vw), 1.38rem);
    --space-m: clamp(1.5rem, calc(1.3rem + 0.98vw), 2.06rem);
    --space-l: clamp(2rem, calc(1.74rem + 1.3vw), 2.75rem);
    --space-xl: clamp(3rem, calc(2.61rem + 1.96vw), 4.13rem);
    --space-2xl: clamp(4rem, calc(3.48rem + 2.61vw), 5.5rem);
    --space-3xl: clamp(6rem, calc(5.22rem + 3.91vw), 8.25rem);
  }


  h1 {

    font-weight: 800;
    font-size: var(--fs-700);
    line-height: var(--lh-1-1);

  }

  h2, h3 {
    font-weight: 800;
    font-size: var(--fs-600);
    line-height: var(--lh-1-1);
  }

  main {
    display: grid;
    gap: var(--space-l);
  }

  body {
    background-color: hsl(var(--offWhite));
    color: hsl(var(--muted));
    font-family: "Inter", sans-serif;
    font-size: var(--fs-400);
    line-height: var(--lh-1-4);
  }

  /* utility classes */


  .active {
    color: inherit;
    text-decoration: none;
  }

  .active:hover {
    color: hsl(var(--softOrange));
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  .attribution {
    transition: 100s;
    font-size: 0.9375rem;
    text-align: center;
  }

  .attribution a {
    color: hsl(228, 45%, 44%);
  }

  .attribution a:hover {
    color: $darkBlue;
  }

  .stack-xs {
    display: grid;
    gap: var(--space-2xs);
  }

  .stack-sm {
    display: grid;
    gap: var(--space-xs);
  }

  .stack-lg {
    display: grid;
    gap: var(--space-m);
  }

  .stack-xl {
    display: grid;
    gap: var(--space-xl);
  }

  p {
    max-width: 60ch;
    color: hsl(var(--muted));
    /* font-size: var(--step-0); */
  }
  
  .flex-wrapper {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
    gap: var(--space-sm);
  }

  .wrapper {
    position: relative;
    min-height: 100vh;
    overflow: hidden;
    padding: var(--space-xs);

    gap: var(--space-xl);

    display: grid;
    grid-template-rows: auto 1fr auto;

    z-index: 51;
  }

  .cha {
    max-width: 20ch;
  }

  .container {
    margin-inline: auto;
    width: 100%;
    max-width: 1200px;
  }

  .logo svg {
    
  }

  .btn-nav {
    /* Removes the default gray bg */
    background: none;

    /* Removes the default border */
    border: none;

  }

  /* BTN */
  
  .btne:hover {
    background-color: hsl(var(--muted));
  }

  .btne:where(:focus) {
    outline: none;
  }

  .btne {
    text-transform: uppercase;
    text-decoration: none;
    line-height: var(--lh-1);
    max-width: max-content;
    color: hsl(var(--offWhite));
    background-color: hsl(var(--softRed));
    letter-spacing: .2em;

    font-weight: 700;
    padding: 1em 1.8em

  }

  /* NAV */

  nav {
    /* Enables a flex context for all its direct children. */
    display: flex;
    justify-content: space-between;
    align-items: center;

  }

  .nav-links {
    /* places an element relative to its parent's position and changing the layout around it. */
    position: absolute;
    right: 0;

    /* Places nav-links towards the right */
    translate: transformX(100%);
  }

  /* RING LINK CODE */

  .ring-link {
    padding: .2em;
    transition: box-shadow 300ms ease 
    ;

    /* cubic-bezier(0.98, 0.03, 0, 1.03) */

  }

  .col-link:hover {
    color: hsl(var(--softRed));
  }

  /* RING LINK ANIMATION */
  .ring-link:where(:focus) {
    outline: none;
  }

  .ring-link:where(:hover, :focus-visible) {
    box-shadow:
    0 0 0 .15em hsl(var(--offWhite)),
    0 0 0 .4em hsl(var(--softRed));
}

.nav-links {
  position: absolute;
  right: 0;

  /* Top 0 Makes sure the 
  links aren't out of view */

  top: 0;
  display: grid;

  min-width: 70vw;

  /* Hides the links */
  transform: translateX(100%);

  gap: var(--space-m);
  align-content: center;

  min-height: 100vh;
  /* For mobile*/
  min-height: 100dvh;

  background-color: hsl(var(--offWhite));

  padding-inline: var(--space-m);

}

.nav-links[open] {

   /* Links become visible */

  transform: translateX(0%);

}

/* Close BTN Styling */

.close-btn {
  position: absolute;
  background: none;
  border: none;
  top: 2%;
  right: 2%;
}

.nav-link {

  /* Link styling */

  text-decoration: none;
  color: hsl(var(--muted));
}

  .nav-bkg {
    background-color: hsl(var(--muted) 
    / .2);
    position: absolute;

    /* The inset CSS property is a 
    shorthand that corresponds to the 
    top, right, bottom, and/or left 
    properties. It has the same multi-value
     syntax of the margin shorthand. */

    inset: 0;

    /* Hide the bkg */

    transform: translateX(-100%);
    
  }
  
   /* BKG become visible */

  .nav-bkg[open] {
    transform: translateX(0%);
    
  }

  /* New Sections */


  #new {
    color: hsl(var(--softOrange));
  }

  [aria-labelledby="new"] {
    margin-top: 1em;
    padding: var(--space-xs);
    background-color: hsl(var(--muted));
    color: hsl(var(--offWhite));
  }

  [aria-labelledby="new"] p {
    color: hsl(var(--darkB));
  }

  
  [aria-labelledby="artices"] {
    margin-top: 1em;
  }

  .new-article {
    border-bottom: 1px solid hsl(var(--light) / .2);
    padding-bottom: var(--space-m);
    margin-bottom: calc(var(--space-m) * -1);
  }

  .new-article:where(:hover) {
    cursor: pointer;
    color: hsl(var(--softOrange));
  }

  .new-article:last-of-type {
    border-bottom: 0;
    padding-bottom: 0;
    margin-bottom: 0;
  }

  .artice-wrapper {
    display: flex;
    flex-wrap: wrap;
  }

  .top-artices {
    display: flex;
  align-items: start;  
  }

  /* Media queries */

  @media only screen and (min-width: 900px) {

    .wrapper {
      padding: var(--space-xl);
    }
    
      .btn-nav, .nav-bkg, .close-btn {
        display: none;
      }

    .nav-links {
      position: static;
      display: flex;

      /* Sets the nav-link 
        to the default */
      transform: translate(0%);

      /* Sets the icon 
        back to the top */

      min-height: auto;
      min-width: auto;
    }

    .flex-wrapper > * {
      flex: 1 1 40%;
    }

    
    [aria-labelledby="new"] {
      margin-top: 0em;
      flex-basis: 30%;
      margin-left: 1rem;
  }

    [aria-labelledby="artices"] {
      margin-top: 0em;
  }

  }